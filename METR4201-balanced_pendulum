% Author: Benjamin Hua-Johnston
% Date: 20190703
% Brief: Formulates a transfer function for the overall system, then can use these values to plot 
         the corresponding root locus. PID and PD values were chosen based on the required system response
         and manipulating the poles and zeros according.
% AAP5
close all;
clear all;

% Variables
Lp = 0.33655;    % Length of pendulum (m)
mp = 0.127;      % Mass of pendulum (kg)
Jp = mp*Lp^2/12; % Pendulum Moment of Inertia about center (kg.m^2)

r = 0.2159;     % Length of arm (m)
mr = 0.257;      % Mass of arm (kg)
Jarm = mr*r^2/3; % Arm Moment of Inertia about pivot (kg.m^2)

% Transmission component inertias 
Jarmature = 3.462e-7; 
Jtachometer = 6.355e-8;
J1 = 5.444e-6;
J2 = 4.183e-5;
J3 = 1.008e-7;
J4 = 4.669e-7;
J5 = 2.382e-9;
Jencoder = 1.463e-13;
Jpotentiometer = 1.616e-10;
N1 = 72; N2 = 120; N3 = 24; N4 = 280; N5 = 20;
G = N4/N5 * N2/N3;
Jrotor_eff = 0.002087; % Confirm this in Task 1.
J = Jarm + Jrotor_eff;

Ra = 2.6;        % motor armature resistance
La = 0.18e-3;     % Motor inductance
kt = 7.68e-3;    % motor current-torque constalpnt
kb = kt;         % back emf   
g = 9.81;        % gravity

Bp = 0.0024;     % Viscous damping coefficients as seen at the pendulum pivot
Br = 0.0024;

eta_m = 0.69;    % motor efficiency
eta_g = 0.9;     % gearbox efficiency


lp = Lp/2  ;    %half length of pendulum

%
% Initialise replayer.
%
%lengthOfReplay = 10; % Seconds.
%frameRate = 100; % Make this higher if playback is too fast. Make this lower if playback is laggy.
%[armPartPatchHandle, armPartVertices, pendPartPatchHandle, pendPartVertices, drivePartPatchHandle, drivePartVertices, thetaPlotHandle, alphaPlotHandle] = initialiseVisualiser(lengthOfReplay);


%
% Task 1:
%
s=tf('s'); %Laplace variable

theta_tau_AAP5_num = (mp*lp^2 + Jp)*s^2 - mp*lp*g;
theta_tau_AAP5_den = ((J+mp*r^2)*(mp*lp^2+Jp)-(mp*lp*r)^2)*s^4 - (J+mp*r^2)*mp*lp*g*s^2;
theta_tau_AAP5 = theta_tau_AAP5_num/theta_tau_AAP5_den;

alpha_theta = mp*lp*r*s^2 / ((mp*lp^2+Jp)*s^2 - mp*lp*g);
alpha_theta_inv = (alpha_theta)^(-1);


%% Effective Inertia Calculation - Task 1

Jmotor_eff = (Jtachometer + Jarmature + J5) * (N4/N5)^2;
Jmotoreff_encoder = (Jmotor_eff + J4 + J3) * (N2/N3)^2;
Jpot_eff = (Jpotentiometer + J1) * (N1/N1)^2;

J_total_eff = Jmotoreff_encoder + Jencoder + J2 + J1 + Jpot_eff;
J_system = J_total_eff + Jarm;

%% Theta_voltage calculation - Task 3

armature = tf(1, [La Ra]); %Armature Block
current_torque_gear = tf(kt*G, 1); %Current-torque constant and gear ratio Block
feedback_function = tf(kb*G*s, 1); %Feedback block

%Initial forward function for tau in terms of V_a
forward_function_tau_va = series(armature, current_torque_gear);

%Secondary forward function for theta in terms of V_a, using initial
forward_function_theta_va = series(forward_function_tau_va, theta_tau_AAP5);

%Apply the feedback, normalise and cancel any pole/zero pairs
theta_va_AAP5 = minreal(feedback(forward_function_theta_va, feedback_function));

%Calculate alpha, using alpha_theta relation in series
alpha_va_AAP5 = series(theta_va_AAP5, alpha_theta);

%Normalise and cancel any pole/zero pairs
minreal(theta_va_AAP5);
alpha_va_AAP5 = minreal(alpha_va_AAP5);
%sisotool(alpha_va_AAP5);

%% Task 4
%Suggested PID compensator based on Root Locus
PID = 1.4985 *(s+26.84)*(s+21.63)/s;
[num, den] = tfdata(PID, 'v');

% Individual Compensator Parameters
Kda = num(1);
Kpa = num(2);
Kia = num(3);

% Simulink and Sisotool for final controller
alpha_va_PID_closed = feedback(series(PID, alpha_va_AAP5),1);
[t4_num, t4_den] = tfdata(alpha_va_PID_closed, 'v');

%% Task 5/6
RL2 = series(alpha_va_PID_closed, alpha_theta_inv);

%Proposed PD controller
PD = (-0.010569 * (1 + 3.6*s))/(1+0.22*s);
[numPD, denPD] = tfdata(PD, 'v');

theta_PD = feedback(series(RL2, PD),1);
[numFinal, denFinal] = tfdata(theta_PD, 'v');
